name: 🪣 Add Storage Buckets

on:
  workflow_dispatch:
    inputs:
      bucket_names:
        description: 'New bucket names (comma separated): my-bucket-1,my-bucket-2'
        required: true
        type: string
      bucket_classes:
        description: 'Storage classes (comma separated, same order): STANDARD,NEARLINE,COLDLINE'
        required: false
        default: 'STANDARD'
        type: string
      # Override variables if needed
      project_id:
        description: 'Override Project ID (leave empty to use GitHub Variable)'
        required: false
        type: string
      region:
        description: 'Override Region (leave empty to use GitHub Variable)'
        required: false
        type: string

permissions:
  contents: read
  id-token: write

jobs:
  validate:
    name: Validate Configuration
    runs-on: ubuntu-latest
    outputs:
      ready: ${{ steps.check.outputs.ready }}
      project-id: ${{ steps.check.outputs.project-id }}
      region: ${{ steps.check.outputs.region }}
      buckets-json: ${{ steps.prepare.outputs.buckets-json }}
      all-buckets: ${{ steps.prepare.outputs.all-buckets }}
      
    steps:
    - name: Check Configuration
      id: check
      run: |
        echo "## 🪣 Add Storage Buckets" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        PROJECT_ID="${{ github.event.inputs.project_id }}"
        if [ -z "$PROJECT_ID" ]; then
          PROJECT_ID="${{ vars.GCP_PROJECT_ID }}"
        fi
        
        REGION="${{ github.event.inputs.region }}"
        if [ -z "$REGION" ]; then
          REGION="${{ vars.GCP_REGION }}"
        fi
        
        MISSING=""
        if [ -z "$PROJECT_ID" ]; then
          MISSING="$MISSING\n- GCP_PROJECT_ID (GitHub Variable) or project_id (input)"
        fi
        if [ -z "$REGION" ]; then
          MISSING="$MISSING\n- GCP_REGION (GitHub Variable) or region (input)"
        fi
        if [ -z "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}" ] && [ -z "${{ secrets.WIF_PROVIDER }}" ]; then
          MISSING="$MISSING\n- GCP authentication (GCP_SERVICE_ACCOUNT_KEY or WIF_PROVIDER secret)"
        fi
        
        if [ -n "$MISSING" ]; then
          echo "❌ **Missing Configuration:**" >> $GITHUB_STEP_SUMMARY
          echo -e "$MISSING" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**👉 Run '1️⃣ Initial Setup' workflow first!**" >> $GITHUB_STEP_SUMMARY
          echo "ready=false" >> $GITHUB_OUTPUT
        else
          echo "✅ Configuration ready" >> $GITHUB_STEP_SUMMARY
          echo "ready=true" >> $GITHUB_OUTPUT
          echo "project-id=$PROJECT_ID" >> $GITHUB_OUTPUT
          echo "region=$REGION" >> $GITHUB_OUTPUT
        fi

    - name: Prepare Bucket Configuration
      id: prepare
      if: steps.check.outputs.ready == 'true'
      run: |
        # Parse new bucket inputs
        IFS=',' read -ra NEW_NAMES <<< "${{ github.event.inputs.bucket_names }}"
        IFS=',' read -ra NEW_CLASSES <<< "${{ github.event.inputs.bucket_classes }}"
        
        # If only one class provided, use it for all buckets
        if [ ${#NEW_CLASSES[@]} -eq 1 ] && [ ${#NEW_NAMES[@]} -gt 1 ]; then
          SINGLE_CLASS="${NEW_CLASSES[0]}"
          NEW_CLASSES=()
          for ((i=0; i<${#NEW_NAMES[@]}; i++)); do
            NEW_CLASSES+=("$SINGLE_CLASS")
          done
        fi
        
        # Validate counts match
        if [ ${#NEW_NAMES[@]} -ne ${#NEW_CLASSES[@]} ]; then
          echo "❌ Number of bucket names and classes must match"
          echo "Names: ${#NEW_NAMES[@]}, Classes: ${#NEW_CLASSES[@]}"
          exit 1
        fi
        
        # Get existing buckets from GitHub Variables (secure storage)
        EXISTING_BUCKETS="${{ vars.ALLOWED_BUCKETS }}"
        
        # Build combined bucket JSON (existing + new)
        BUCKETS_JSON="["
        
        # Add existing buckets first
        if [ -n "$EXISTING_BUCKETS" ]; then
          IFS=',' read -ra EXISTING_NAMES <<< "$EXISTING_BUCKETS"
          for ((i=0; i<${#EXISTING_NAMES[@]}; i++)); do
            if [ $i -gt 0 ]; then BUCKETS_JSON+=","; fi
            BUCKETS_JSON+="{\"name\":\"${EXISTING_NAMES[i]}\",\"class\":\"STANDARD\"}"
          done
        fi
        
        # Add new buckets
        for ((i=0; i<${#NEW_NAMES[@]}; i++)); do
          if [ -n "$EXISTING_BUCKETS" ] || [ $i -gt 0 ]; then BUCKETS_JSON+=","; fi
          BUCKETS_JSON+="{\"name\":\"${NEW_NAMES[i]}\",\"class\":\"${NEW_CLASSES[i]}\"}"
        done
        
        BUCKETS_JSON+="]"
        
        # Create updated bucket list for GitHub Variable
        ALL_BUCKETS="$EXISTING_BUCKETS"
        if [ -n "$ALL_BUCKETS" ]; then
          ALL_BUCKETS="$ALL_BUCKETS,${{ github.event.inputs.bucket_names }}"
        else
          ALL_BUCKETS="${{ github.event.inputs.bucket_names }}"
        fi
        
        echo "buckets-json=$BUCKETS_JSON" >> $GITHUB_OUTPUT
        echo "all-buckets=$ALL_BUCKETS" >> $GITHUB_OUTPUT
        
        echo "### 📋 Bucket Configuration" >> $GITHUB_STEP_SUMMARY
        echo "| Setting | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| New Buckets | ${{ github.event.inputs.bucket_names }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Storage Classes | ${{ github.event.inputs.bucket_classes }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Project | ${{ steps.check.outputs.project-id }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Region | ${{ steps.check.outputs.region }} |" >> $GITHUB_STEP_SUMMARY

  add-buckets:
    name: Add Storage Buckets
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.ready == 'true'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Authenticate to GCP
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
        credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

    - name: Setup gcloud
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ needs.validate.outputs.project-id }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.6.0

    - name: Initialize Terraform
      working-directory: terraform
      run: |
        terraform init \
          -backend-config="bucket=${{ needs.validate.outputs.project-id }}-terraform-state" \
          -backend-config="prefix=terraform/state"

    - name: Create Temporary Configuration
      working-directory: terraform
      run: |
        # Create temporary terraform.tfvars (NEVER committed)
        cat > terraform.tfvars << EOF
        project_id = "${{ needs.validate.outputs.project-id }}"
        region     = "${{ needs.validate.outputs.region }}"
        service_name = "${{ vars.CLOUD_RUN_SERVICE_NAME || 'filemanager' }}"
        artifact_registry_repo = "${{ vars.ARTIFACT_REGISTRY_REPO || 'filemanager-repo' }}"
        environment = "prod"
        github_repo = "${{ github.repository }}"
        enable_workload_identity = true
        storage_buckets = ${{ needs.validate.outputs.buckets-json }}
        EOF
        
        echo "🔒 Temporary configuration created (not committed to repo)"

    - name: Plan Infrastructure Changes
      working-directory: terraform
      run: |
        terraform plan -detailed-exitcode -out=tfplan
        terraform show -no-color tfplan > plan_output.txt
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📋 Terraform Plan - New Buckets" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        head -100 plan_output.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: Apply Infrastructure Changes
      working-directory: terraform
      run: |
        terraform apply -auto-approve tfplan
        echo "✅ New storage buckets created successfully!"

    - name: Cleanup Temporary Files
      working-directory: terraform
      run: |
        # Remove all temporary files to prevent accidental commit
        rm -f terraform.tfvars tfplan plan_output.txt
        echo "🧹 Cleaned up temporary files"

    - name: Update Instructions
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🔧 Required: Update GitHub Variable" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**📝 IMPORTANT**: Update your GitHub Variable for the new buckets to be accessible:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "1. Go to: **Settings > Secrets and variables > Actions > Variables**" >> $GITHUB_STEP_SUMMARY
        echo "2. Update **ALLOWED_BUCKETS** to:" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "${{ needs.validate.outputs.all-buckets }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🔒 **Security**: Bucket names stored securely in GitHub Variables, never in repository files" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ **After updating the variable, your new buckets will be accessible in the application!**" >> $GITHUB_STEP_SUMMARY

  setup-required:
    name: Setup Required
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.ready == 'false'
    
    steps:
    - name: Show Setup Instructions
      run: |
        echo "## ⚠️ Setup Required" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Cannot add buckets without initial setup." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Steps:**" >> $GITHUB_STEP_SUMMARY
        echo "1. Run **'1️⃣ Initial Setup'** workflow first" >> $GITHUB_STEP_SUMMARY
        echo "2. Configure required GitHub Variables and Secrets" >> $GITHUB_STEP_SUMMARY
        echo "3. Come back and add your buckets" >> $GITHUB_STEP_SUMMARY
