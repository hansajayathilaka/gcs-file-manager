name: 🚀 Deploy Application

on:
  workflow_dispatch:
    inputs:
      project_id:
        description: 'Override Project ID (leave empty to use GitHub Variable)'
        required: false
        type: string
      service_name:
        description: 'Override Service Name (leave empty to use GitHub Variable)'
        required: false
        type: string
      region:
        description: 'Override Region (leave empty to use GitHub Variable)'
        required: false
        type: string
      use_template:
        description: 'Use Cloud Run YAML template instead of gcloud deploy'
        required: false
        default: true
        type: boolean
  push:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - 'terraform/**'
      - '.github/workflows/setup.yml'
      - '.github/workflows/add-buckets.yml'
      - '.github/workflows/update-infrastructure.yml'

permissions:
  contents: read
  id-token: write

jobs:
  validate:
    name: Validate Configuration
    runs-on: ubuntu-latest
    outputs:
      ready: ${{ steps.check.outputs.ready }}
      project-id: ${{ steps.check.outputs.project-id }}
      service-name: ${{ steps.check.outputs.service-name }}
      region: ${{ steps.check.outputs.region }}
      
    steps:
    - name: Check Configuration
      id: check
      run: |
        echo "## 🚀 Application Deployment" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        PROJECT_ID="${{ github.event.inputs.project_id }}"
        if [ -z "$PROJECT_ID" ]; then
          PROJECT_ID="${{ vars.GCP_PROJECT_ID }}"
        fi
        
        SERVICE_NAME="${{ github.event.inputs.service_name }}"
        if [ -z "$SERVICE_NAME" ]; then
          SERVICE_NAME="${{ vars.CLOUD_RUN_SERVICE_NAME }}"
        fi
        
        REGION="${{ github.event.inputs.region }}"
        if [ -z "$REGION" ]; then
          REGION="${{ vars.GCP_REGION }}"
        fi
        
        MISSING=""
        if [ -z "$PROJECT_ID" ]; then
          MISSING="$MISSING\n- GCP_PROJECT_ID (GitHub Variable)"
        fi
        if [ -z "$SERVICE_NAME" ]; then
          MISSING="$MISSING\n- CLOUD_RUN_SERVICE_NAME (GitHub Variable)"
        fi
        if [ -z "$REGION" ]; then
          MISSING="$MISSING\n- GCP_REGION (GitHub Variable)"
        fi
        if [ -z "${{ vars.ARTIFACT_REGISTRY_REPO }}" ]; then
          MISSING="$MISSING\n- ARTIFACT_REGISTRY_REPO (GitHub Variable)"
        fi
        if [ -z "${{ vars.ALLOWED_BUCKETS }}" ]; then
          MISSING="$MISSING\n- ALLOWED_BUCKETS (GitHub Variable)"
        fi
        
        # Check Firebase config
        if [ -z "${{ vars.NEXT_PUBLIC_FIREBASE_API_KEY }}" ]; then
          MISSING="$MISSING\n- NEXT_PUBLIC_FIREBASE_API_KEY (GitHub Variable)"
        fi
        if [ -z "${{ vars.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}" ]; then
          MISSING="$MISSING\n- NEXT_PUBLIC_FIREBASE_PROJECT_ID (GitHub Variable)"
        fi
        
        # Check secrets
        if [ -z "${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}" ]; then
          MISSING="$MISSING\n- FIREBASE_SERVICE_ACCOUNT_KEY (GitHub Secret)"
        fi
        if [ -z "${{ secrets.NEXTAUTH_SECRET }}" ]; then
          MISSING="$MISSING\n- NEXTAUTH_SECRET (GitHub Secret)"
        fi
        if [ -z "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}" ] && [ -z "${{ secrets.WIF_PROVIDER }}" ]; then
          MISSING="$MISSING\n- GCP authentication (GCP_SERVICE_ACCOUNT_KEY or WIF_PROVIDER secret)"
        fi
        
        if [ -n "$MISSING" ]; then
          echo "❌ **Missing Configuration:**" >> $GITHUB_STEP_SUMMARY
          echo -e "$MISSING" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**👉 Run '1️⃣ Initial Setup' workflow and complete Firebase setup!**" >> $GITHUB_STEP_SUMMARY
          echo "ready=false" >> $GITHUB_OUTPUT
        else
          echo "✅ Configuration complete" >> $GITHUB_STEP_SUMMARY
          echo "| Setting | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Project ID | $PROJECT_ID |" >> $GITHUB_STEP_SUMMARY
          echo "| Service Name | $SERVICE_NAME |" >> $GITHUB_STEP_SUMMARY
          echo "| Region | $REGION |" >> $GITHUB_STEP_SUMMARY
          echo "| Use Template | ${{ github.event.inputs.use_template || 'true' }} |" >> $GITHUB_STEP_SUMMARY
          echo "ready=true" >> $GITHUB_OUTPUT
          echo "project-id=$PROJECT_ID" >> $GITHUB_OUTPUT
          echo "service-name=$SERVICE_NAME" >> $GITHUB_OUTPUT
          echo "region=$REGION" >> $GITHUB_OUTPUT
        fi

  build-and-deploy:
    name: Build and Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.ready == 'true'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Authenticate to GCP
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
        credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

    - name: Setup gcloud
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ needs.validate.outputs.project-id }}

    - name: Configure Docker
      run: |
        gcloud auth configure-docker ${{ needs.validate.outputs.region }}-docker.pkg.dev

    - name: Build Docker Image
      run: |
        IMAGE_URL="${{ needs.validate.outputs.region }}-docker.pkg.dev/${{ needs.validate.outputs.project-id }}/${{ vars.ARTIFACT_REGISTRY_REPO }}/filemanager:${{ github.sha }}"
        
        echo "🏗️ Building Next.js application image: $IMAGE_URL"
        
        # Build the Docker image with build-time Firebase config
        docker build \
          --tag "$IMAGE_URL" \
          --build-arg NEXT_PUBLIC_FIREBASE_API_KEY="${{ vars.NEXT_PUBLIC_FIREBASE_API_KEY }}" \
          --build-arg NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN="${{ vars.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}" \
          --build-arg NEXT_PUBLIC_FIREBASE_PROJECT_ID="${{ vars.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}" \
          --build-arg NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET="${{ vars.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}" \
          --build-arg NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID="${{ vars.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}" \
          --build-arg NEXT_PUBLIC_FIREBASE_APP_ID="${{ vars.NEXT_PUBLIC_FIREBASE_APP_ID }}" \
          .
        
        echo "📤 Pushing image to Artifact Registry..."
        docker push "$IMAGE_URL"
        
        echo "IMAGE_URL=$IMAGE_URL" >> $GITHUB_ENV

    - name: Deploy with Cloud Run Template
      if: github.event.inputs.use_template == 'true' || github.event.inputs.use_template == ''
      run: |
        echo "🚀 Deploying using Cloud Run YAML template..."
        
        # Prepare the service URL for NEXTAUTH_URL
        SERVICE_URL="https://${{ needs.validate.outputs.service-name }}-$(echo ${{ needs.validate.outputs.region }} | tr -d '-').${{ needs.validate.outputs.project-id }}.a.run.app"
        
        # Set environment variables for template substitution
        export SERVICE_NAME="${{ needs.validate.outputs.service-name }}"
        export IMAGE_URL="$IMAGE_URL"
        export NEXT_PUBLIC_FIREBASE_API_KEY="${{ vars.NEXT_PUBLIC_FIREBASE_API_KEY }}"
        export NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN="${{ vars.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}"
        export NEXT_PUBLIC_FIREBASE_PROJECT_ID="${{ vars.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}"
        export NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET="${{ vars.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}"
        export NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID="${{ vars.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}"
        export NEXT_PUBLIC_FIREBASE_APP_ID="${{ vars.NEXT_PUBLIC_FIREBASE_APP_ID }}"
        export NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID="${{ vars.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID || '' }}"
        export FIREBASE_SERVICE_ACCOUNT_KEY="${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}"
        export GOOGLE_CLOUD_PROJECT_ID="${{ needs.validate.outputs.project-id }}"
        export ALLOWED_BUCKETS="${{ vars.ALLOWED_BUCKETS }}"
        export NEXTAUTH_SECRET="${{ secrets.NEXTAUTH_SECRET }}"
        export NEXTAUTH_URL="$SERVICE_URL"
        
        # Create service YAML from template
        envsubst < .github/templates/cloudrun-service.template.yaml > service.yaml
        
        echo "📄 Generated service configuration:"
        echo "Service: $SERVICE_NAME"
        echo "Image: $IMAGE_URL"
        echo "Region: ${{ needs.validate.outputs.region }}"
        
        # Apply the service configuration
        gcloud run services replace service.yaml \
          --region ${{ needs.validate.outputs.region }}
        
        # Clean up temporary file (security)
        rm -f service.yaml
        
        echo "✅ Deployed using YAML template"

    - name: Deploy with gcloud Command
      if: github.event.inputs.use_template == 'false'
      run: |
        echo "🚀 Deploying using gcloud run deploy..."
        
        # Prepare the service URL for NEXTAUTH_URL
        SERVICE_URL="https://${{ needs.validate.outputs.service-name }}-$(echo ${{ needs.validate.outputs.region }} | tr -d '-').${{ needs.validate.outputs.project-id }}.a.run.app"
        
        gcloud run deploy ${{ needs.validate.outputs.service-name }} \
          --image "$IMAGE_URL" \
          --region ${{ needs.validate.outputs.region }} \
          --platform managed \
          --allow-unauthenticated \
          --set-env-vars "GOOGLE_CLOUD_PROJECT_ID=${{ needs.validate.outputs.project-id }}" \
          --set-env-vars "ALLOWED_BUCKETS=${{ vars.ALLOWED_BUCKETS }}" \
          --set-env-vars "FIREBASE_SERVICE_ACCOUNT_KEY=${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}" \
          --set-env-vars "NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}" \
          --set-env-vars "NEXTAUTH_URL=$SERVICE_URL" \
          --set-env-vars "NODE_ENV=production" \
          --memory 1Gi \
          --cpu 1 \
          --timeout 300 \
          --max-instances 10 \
          --concurrency 100
        
        echo "✅ Deployed using gcloud command"

    - name: Get Service URL
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ needs.validate.outputs.service-name }} \
          --region ${{ needs.validate.outputs.region }} \
          --format 'value(status.url)')
        
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV

    - name: Deployment Success
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🎉 Deployment Successful!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**🌍 Your FileManager app is live at:**" >> $GITHUB_STEP_SUMMARY
        echo "[$SERVICE_URL]($SERVICE_URL)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Deployment Details" >> $GITHUB_STEP_SUMMARY
        echo "| Setting | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Service | ${{ needs.validate.outputs.service-name }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Region | ${{ needs.validate.outputs.region }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Image | $IMAGE_URL |" >> $GITHUB_STEP_SUMMARY
        echo "| Buckets | ${{ vars.ALLOWED_BUCKETS }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Method | ${{ github.event.inputs.use_template == 'false' && 'gcloud CLI' || 'YAML Template' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔧 Management" >> $GITHUB_STEP_SUMMARY
        echo "- **Add more buckets**: Use '🪣 Add Storage Buckets' workflow" >> $GITHUB_STEP_SUMMARY
        echo "- **Update infrastructure**: Use '🔧 Update Infrastructure' workflow" >> $GITHUB_STEP_SUMMARY
        echo "- **Update app**: Push to main branch or run this workflow again" >> $GITHUB_STEP_SUMMARY
        echo "- **Monitor**: [Cloud Run Console](https://console.cloud.google.com/run?project=${{ needs.validate.outputs.project-id }})" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
        echo "- [Application]($SERVICE_URL)" >> $GITHUB_STEP_SUMMARY
        echo "- [Cloud Run Service](https://console.cloud.google.com/run/detail/${{ needs.validate.outputs.region }}/${{ needs.validate.outputs.service-name }}/metrics?project=${{ needs.validate.outputs.project-id }})" >> $GITHUB_STEP_SUMMARY
        echo "- [Cloud Storage](https://console.cloud.google.com/storage/browser?project=${{ needs.validate.outputs.project-id }})" >> $GITHUB_STEP_SUMMARY

  setup-required:
    name: Setup Required
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.ready == 'false'
    
    steps:
    - name: Show Setup Instructions
      run: |
        echo "## ⚠️ Setup Required" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Cannot deploy without proper configuration." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Setup Steps:**" >> $GITHUB_STEP_SUMMARY
        echo "1. **Run '1️⃣ Initial Setup'** workflow" >> $GITHUB_STEP_SUMMARY
        echo "2. **Configure Firebase** (follow the setup output)" >> $GITHUB_STEP_SUMMARY
        echo "3. **Add all required GitHub Variables and Secrets**" >> $GITHUB_STEP_SUMMARY
        echo "4. **Come back and deploy**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Missing configuration details are shown above." >> $GITHUB_STEP_SUMMARY
