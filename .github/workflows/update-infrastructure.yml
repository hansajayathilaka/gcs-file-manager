name: 🔧 Update Infrastructure

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Infrastructure action to perform'
        required: true
        type: choice
        options:
          - plan
          - apply
      changes_description:
        description: 'Describe the changes you want to make (for documentation)'
        required: true
        type: string
      # Override variables if needed
      project_id:
        description: 'Override Project ID (leave empty to use GitHub Variable)'
        required: false
        type: string
      region:
        description: 'Override Region (leave empty to use GitHub Variable)'
        required: false
        type: string
      service_name:
        description: 'Override Service Name (leave empty to use GitHub Variable)'
        required: false
        type: string

permissions:
  contents: read
  id-token: write

jobs:
  validate:
    name: Validate Configuration
    runs-on: ubuntu-latest
    outputs:
      ready: ${{ steps.check.outputs.ready }}
      project-id: ${{ steps.check.outputs.project-id }}
      region: ${{ steps.check.outputs.region }}
      service-name: ${{ steps.check.outputs.service-name }}
      
    steps:
    - name: Check Configuration
      id: check
      run: |
        echo "## 🔧 Infrastructure Update" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Changes**: ${{ github.event.inputs.changes_description }}" >> $GITHUB_STEP_SUMMARY
        echo "**Action**: ${{ github.event.inputs.action }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        PROJECT_ID="${{ github.event.inputs.project_id }}"
        if [ -z "$PROJECT_ID" ]; then
          PROJECT_ID="${{ vars.GCP_PROJECT_ID }}"
        fi
        
        REGION="${{ github.event.inputs.region }}"
        if [ -z "$REGION" ]; then
          REGION="${{ vars.GCP_REGION }}"
        fi
        
        SERVICE_NAME="${{ github.event.inputs.service_name }}"
        if [ -z "$SERVICE_NAME" ]; then
          SERVICE_NAME="${{ vars.CLOUD_RUN_SERVICE_NAME }}"
        fi
        
        MISSING=""
        if [ -z "$PROJECT_ID" ]; then
          MISSING="$MISSING\n- GCP_PROJECT_ID (GitHub Variable)"
        fi
        if [ -z "$REGION" ]; then
          MISSING="$MISSING\n- GCP_REGION (GitHub Variable)"
        fi
        if [ -z "$SERVICE_NAME" ]; then
          MISSING="$MISSING\n- CLOUD_RUN_SERVICE_NAME (GitHub Variable)"
        fi
        if [ -z "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}" ] && [ -z "${{ secrets.WIF_PROVIDER }}" ]; then
          MISSING="$MISSING\n- GCP authentication (GCP_SERVICE_ACCOUNT_KEY or WIF_PROVIDER secret)"
        fi
        
        if [ -n "$MISSING" ]; then
          echo "❌ **Missing Configuration:**" >> $GITHUB_STEP_SUMMARY
          echo -e "$MISSING" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**👉 Run '1️⃣ Initial Setup' workflow first!**" >> $GITHUB_STEP_SUMMARY
          echo "ready=false" >> $GITHUB_OUTPUT
        else
          echo "✅ Configuration ready" >> $GITHUB_STEP_SUMMARY
          echo "| Setting | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Project ID | $PROJECT_ID |" >> $GITHUB_STEP_SUMMARY
          echo "| Region | $REGION |" >> $GITHUB_STEP_SUMMARY
          echo "| Service Name | $SERVICE_NAME |" >> $GITHUB_STEP_SUMMARY
          echo "ready=true" >> $GITHUB_OUTPUT
          echo "project-id=$PROJECT_ID" >> $GITHUB_OUTPUT
          echo "region=$REGION" >> $GITHUB_OUTPUT
          echo "service-name=$SERVICE_NAME" >> $GITHUB_OUTPUT
        fi

  infrastructure:
    name: Infrastructure Management
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.ready == 'true'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Authenticate to GCP
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
        credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

    - name: Setup gcloud
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ needs.validate.outputs.project-id }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.6.0

    - name: Initialize Terraform
      working-directory: terraform
      run: |
        terraform init \
          -backend-config="bucket=${{ needs.validate.outputs.project-id }}-terraform-state" \
          -backend-config="prefix=terraform/state"

    - name: Create Temporary Configuration
      working-directory: terraform
      run: |
        # Convert existing ALLOWED_BUCKETS to JSON format
        EXISTING_BUCKETS="${{ vars.ALLOWED_BUCKETS }}"
        BUCKETS_JSON="["
        if [ -n "$EXISTING_BUCKETS" ]; then
          IFS=',' read -ra NAMES <<< "$EXISTING_BUCKETS"
          for ((i=0; i<${#NAMES[@]}; i++)); do
            if [ $i -gt 0 ]; then BUCKETS_JSON+=","; fi
            BUCKETS_JSON+="{\"name\":\"${NAMES[i]}\",\"class\":\"STANDARD\"}"
          done
        fi
        BUCKETS_JSON+="]"
        
        # Create temporary terraform.tfvars (NEVER committed)
        cat > terraform.tfvars << EOF
        project_id = "${{ needs.validate.outputs.project-id }}"
        region     = "${{ needs.validate.outputs.region }}"
        service_name = "${{ needs.validate.outputs.service-name }}"
        artifact_registry_repo = "${{ vars.ARTIFACT_REGISTRY_REPO || 'filemanager-repo' }}"
        environment = "prod"
        github_repo = "${{ github.repository }}"
        enable_workload_identity = true
        storage_buckets = $BUCKETS_JSON
        EOF
        
        echo "🔒 Temporary configuration created (not committed to repo)"
        echo "📄 Configuration preview:"
        grep -v "storage_buckets" terraform.tfvars  # Don't show bucket names in logs

    - name: Terraform Plan
      working-directory: terraform
      run: |
        terraform plan -detailed-exitcode -out=tfplan
        terraform show -no-color tfplan > plan_output.txt
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📋 Terraform Plan" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        # Show plan but filter out sensitive bucket names
        grep -v "bucket_name\|storage_bucket" plan_output.txt | head -100 >> $GITHUB_STEP_SUMMARY || head -100 plan_output.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: Terraform Apply
      if: github.event.inputs.action == 'apply'
      working-directory: terraform
      run: |
        terraform apply -auto-approve tfplan
        echo "✅ Infrastructure updated successfully!"
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## ✅ Infrastructure Update Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Changes Applied**: ${{ github.event.inputs.changes_description }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🔒 **Security**: All configuration managed securely via GitHub Variables/Secrets" >> $GITHUB_STEP_SUMMARY

    - name: Plan Only Summary
      if: github.event.inputs.action == 'plan'
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📋 Plan Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Planned Changes**: ${{ github.event.inputs.changes_description }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Next Steps**:" >> $GITHUB_STEP_SUMMARY
        echo "- Review the plan above" >> $GITHUB_STEP_SUMMARY
        echo "- Run this workflow again with **action: apply** to implement changes" >> $GITHUB_STEP_SUMMARY

    - name: Cleanup Temporary Files
      working-directory: terraform
      run: |
        # Remove all temporary files to prevent accidental commit
        rm -f terraform.tfvars tfplan plan_output.txt
        echo "🧹 Cleaned up temporary files"

  setup-required:
    name: Setup Required
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.ready == 'false'
    
    steps:
    - name: Show Setup Instructions
      run: |
        echo "## ⚠️ Setup Required" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Cannot update infrastructure without initial setup." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Steps:**" >> $GITHUB_STEP_SUMMARY
        echo "1. Run **'1️⃣ Initial Setup'** workflow first" >> $GITHUB_STEP_SUMMARY
        echo "2. Configure required GitHub Variables and Secrets" >> $GITHUB_STEP_SUMMARY
        echo "3. Come back and update your infrastructure" >> $GITHUB_STEP_SUMMARY
