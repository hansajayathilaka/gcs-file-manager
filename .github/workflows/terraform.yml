name: Terraform Infrastructure Management

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy
          - output
      project_id:
        description: 'GCP Project ID'
        required: false
        default: ''
        type: string
      region:
        description: 'GCP Region'
        required: false
        default: ''
        type: string
      service_name:
        description: 'Cloud Run Service Name'
        required: false
        default: ''
        type: string
      artifact_registry_repo:
        description: 'Artifact Registry Repository Name'
        required: false
        default: ''
        type: string
      storage_buckets:
        description: 'Storage Buckets (JSON format) - Example: [{"name":"bucket1","storage_class":"STANDARD"}] or [{name:bucket1,storage_class:STANDARD}]'
        required: false
        default: ''
        type: string
      billing_account_id:
        description: 'GCP Billing Account ID (format: XXXXXX-XXXXXX-XXXXXX) - Leave empty if billing is already configured'
        required: false
        default: ''
        type: string
      github_repo:
        description: 'GitHub Repository (owner/repo) for Workload Identity - Leave empty to auto-detect'
        required: false
        default: ''
        type: string
      enable_workload_identity:
        description: 'Enable Workload Identity (more secure)'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      environment:
        description: 'Environment (dev/staging/prod)'
        required: false
        default: 'prod'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  # Set Terraform variables with fallbacks from GitHub variables (no hard-coded defaults)
  TF_VAR_project_id: ${{ github.event.inputs.project_id || vars.TERRAFORM_PROJECT_ID || vars.GCP_PROJECT_ID }}
  TF_VAR_region: ${{ github.event.inputs.region || vars.TERRAFORM_REGION || vars.GCP_REGION }}
  TF_VAR_service_name: ${{ github.event.inputs.service_name || vars.TERRAFORM_SERVICE_NAME || vars.CLOUD_RUN_SERVICE_NAME }}
  TF_VAR_artifact_registry_repo: ${{ github.event.inputs.artifact_registry_repo || vars.TERRAFORM_ARTIFACT_REGISTRY_REPO || vars.ARTIFACT_REGISTRY_REPO }}
  TF_VAR_environment: ${{ github.event.inputs.environment || vars.TERRAFORM_ENVIRONMENT || 'prod' }}
  TF_VAR_enable_workload_identity: ${{ github.event.inputs.enable_workload_identity || vars.TERRAFORM_ENABLE_WORKLOAD_IDENTITY || 'true' }}
  TF_VAR_billing_account_id: ${{ github.event.inputs.billing_account_id || vars.TERRAFORM_BILLING_ACCOUNT_ID || '' }}
  TF_VAR_github_repo: ${{ github.event.inputs.github_repo || vars.TERRAFORM_GITHUB_REPO || github.repository }}

permissions:
  contents: read
  id-token: write  # Required for Workload Identity
  pull-requests: write  # For commenting on PRs with plan output

jobs:
  terraform:
    name: Terraform ${{ github.event.inputs.action }}
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate Required Variables
      run: |
        echo "üîç Validating required configuration variables..."
        
        # Check required variables
        MISSING_VARS=""
        
        if [ -z "${{ env.TF_VAR_project_id }}" ]; then
          MISSING_VARS="$MISSING_VARS\n- project_id (set TERRAFORM_PROJECT_ID variable or provide manual input)"
        fi
        
        if [ -z "${{ env.TF_VAR_region }}" ]; then
          MISSING_VARS="$MISSING_VARS\n- region (set TERRAFORM_REGION variable or provide manual input)"
        fi
        
        if [ -z "${{ env.TF_VAR_service_name }}" ]; then
          MISSING_VARS="$MISSING_VARS\n- service_name (set TERRAFORM_SERVICE_NAME variable or provide manual input)"
        fi
        
        if [ -z "${{ env.TF_VAR_artifact_registry_repo }}" ]; then
          MISSING_VARS="$MISSING_VARS\n- artifact_registry_repo (set TERRAFORM_ARTIFACT_REGISTRY_REPO variable or provide manual input)"
        fi
        
        if [ -z "${{ env.TF_VAR_environment }}" ]; then
          MISSING_VARS="$MISSING_VARS\n- environment (set TERRAFORM_ENVIRONMENT variable or provide manual input)"
        fi
        
        if [ -z "${{ env.TF_VAR_enable_workload_identity }}" ]; then
          MISSING_VARS="$MISSING_VARS\n- enable_workload_identity (set TERRAFORM_ENABLE_WORKLOAD_IDENTITY variable or provide manual input)"
        fi
        
        if [ -n "$MISSING_VARS" ]; then
          echo "‚ùå ERROR: Missing required configuration variables:"
          echo -e "$MISSING_VARS"
          echo ""
          echo "Please either:"
          echo "1. Set GitHub Variables at: Settings > Secrets and variables > Actions > Variables"
          echo "2. Provide values when running this workflow manually"
          echo ""
          echo "See docs/GITHUB_VARIABLES_SETUP.md for detailed setup instructions"
          exit 1
        fi
        
        echo "‚úÖ All required variables are provided"

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.6.0
        terraform_wrapper: false

    - name: Set authentication method
      id: auth-method
      run: |
        if [ -n "${{ secrets.WIF_PROVIDER }}" ]; then
          echo "method=workload-identity" >> $GITHUB_OUTPUT
          echo "üîê Using Workload Identity authentication"
        elif [ -n "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}" ]; then
          echo "method=service-account" >> $GITHUB_OUTPUT
          echo "üîë Using Service Account Key authentication"
        else
          echo "‚ùå ERROR: No authentication method configured!"
          echo ""
          echo "To run this workflow, you need ONE of the following:"
          echo "1. üîê **Workload Identity** (recommended):"
          echo "   - Set WIF_PROVIDER and WIF_SERVICE_ACCOUNT secrets"
          echo "   - These are created by Terraform on first run"
          echo ""
          echo "2. üîë **Service Account Key** (for bootstrap):"
          echo "   - Set GCP_SERVICE_ACCOUNT_KEY secret"
          echo "   - Use this for initial Terraform run"
          echo ""
          echo "üìñ **First time setup?** See docs/GITHUB_SETUP.md for bootstrap instructions"
          echo ""
          echo "üîÑ **Bootstrap Process:**"
          echo "1. Create temporary service account manually"
          echo "2. Add GCP_SERVICE_ACCOUNT_KEY secret"
          echo "3. Run this workflow to create infrastructure"
          echo "4. Switch to Workload Identity (optional)"
          exit 1
        fi

    # Authenticate to Google Cloud using Workload Identity (if configured)
    - name: Authenticate to Google Cloud (Workload Identity)
      if: steps.auth-method.outputs.method == 'workload-identity'
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

    # Fallback: Authenticate using Service Account Key
    - name: Authenticate to Google Cloud (Service Account Key)
      if: steps.auth-method.outputs.method == 'service-account'
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.TF_VAR_project_id }}

    - name: Process storage buckets input
      id: process-buckets
      run: |
        # Use input or GitHub variable for storage buckets
        BUCKETS_INPUT="${{ github.event.inputs.storage_buckets }}"
        if [ -z "$BUCKETS_INPUT" ]; then
          BUCKETS_INPUT="${{ vars.TERRAFORM_STORAGE_BUCKETS }}"
        fi
        
        # Require explicit bucket configuration
        if [ -z "$BUCKETS_INPUT" ]; then
          echo "‚ùå ERROR: Storage buckets must be configured!"
          echo ""
          echo "Please either:"
          echo "1. Set TERRAFORM_STORAGE_BUCKETS GitHub Variable (JSON format)"
          echo "2. Provide storage_buckets input when running this workflow (JSON format)"
          echo ""
          echo "Required JSON Format:"
          echo '[{"name":"bucket1","storage_class":"STANDARD"},{"name":"bucket2","storage_class":"NEARLINE"}]'
          echo ""
          echo "Storage class options: STANDARD, NEARLINE, COLDLINE, ARCHIVE"
          echo "See docs/GITHUB_VARIABLES_SETUP.md for detailed setup instructions"
          exit 1
        fi
        
        echo "Raw buckets input: $BUCKETS_INPUT"
        
        # Fix GitHub Actions JSON parsing issue
        # GitHub Actions removes quotes from JSON, so we need to reconstruct valid JSON
        # First, try to parse as-is in case it's already valid JSON
        if echo "$BUCKETS_INPUT" | jq empty 2>/dev/null; then
          echo "Input is already valid JSON"
          BUCKETS_FIXED="$BUCKETS_INPUT"
        else
          echo "Fixing GitHub Actions unquoted JSON format..."
          # Use sed to add quotes around unquoted field names and values
          BUCKETS_FIXED=$(echo "$BUCKETS_INPUT" | \
            sed 's/{\s*name:/{"name":/g' | \
            sed 's/,\s*storage_class:/,"storage_class":/g' | \
            sed 's/,\s*location:/,"location":/g' | \
            sed 's/:\s*\([^",}]\+\)/:\"\1\"/g')
        fi
        
        echo "Fixed buckets input: $BUCKETS_FIXED"
        
        # Validate JSON format
        if ! echo "$BUCKETS_FIXED" | jq empty 2>/dev/null; then
          echo "‚ùå ERROR: Invalid JSON format for storage buckets!"
          echo ""
          echo "Expected format:"
          echo '[{"name":"bucket1","storage_class":"STANDARD"},{"name":"bucket2","storage_class":"NEARLINE"}]'
          echo ""
          echo "Storage class options: STANDARD, NEARLINE, COLDLINE, ARCHIVE"
          echo ""
          echo "Note: When entering JSON in GitHub Actions workflow input, you can use either:"
          echo "1. Properly quoted JSON: [{\"name\":\"bucket1\",\"storage_class\":\"STANDARD\"}]"
          echo "2. Simplified format: [{name:bucket1,storage_class:STANDARD}] (quotes will be added automatically)"
          exit 1
        fi
        
        # Validate required fields in each bucket object
        if ! echo "$BUCKETS_FIXED" | jq -e 'all(.[]; has("name") and has("storage_class"))' >/dev/null 2>&1; then
          echo "‚ùå ERROR: Each bucket must have 'name' and 'storage_class' fields!"
          echo ""
          echo "Example:"
          echo '[{"name":"my-bucket","storage_class":"STANDARD"}]'
          exit 1
        fi
        
        # Validate storage classes
        if ! echo "$BUCKETS_FIXED" | jq -e 'all(.[]; .storage_class | test("^(STANDARD|NEARLINE|COLDLINE|ARCHIVE|MULTI_REGIONAL|REGIONAL)$"))' >/dev/null 2>&1; then
          echo "‚ùå ERROR: Invalid storage class detected!"
          echo ""
          echo "Valid storage classes: STANDARD, NEARLINE, COLDLINE, ARCHIVE, MULTI_REGIONAL, REGIONAL"
          echo ""
          echo "Your buckets:"
          echo "$BUCKETS_FIXED" | jq -r '.[] | "- \(.name): \(.storage_class)"'
          exit 1
        fi
        
        echo "TF_VAR_storage_buckets=$BUCKETS_FIXED" >> $GITHUB_ENV
        echo "‚úÖ Valid bucket configuration: $BUCKETS_FIXED"

    - name: Display Configuration Summary
      run: |
        echo "## Configuration Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Setting | Value | Source |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|--------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Project ID | ${{ env.TF_VAR_project_id }} | ${{ github.event.inputs.project_id && 'Manual Input' || vars.TERRAFORM_PROJECT_ID && 'GitHub Variable (TERRAFORM_PROJECT_ID)' || vars.GCP_PROJECT_ID && 'GitHub Variable (GCP_PROJECT_ID)' || 'Default' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Region | ${{ env.TF_VAR_region }} | ${{ github.event.inputs.region && 'Manual Input' || vars.TERRAFORM_REGION && 'GitHub Variable (TERRAFORM_REGION)' || vars.GCP_REGION && 'GitHub Variable (GCP_REGION)' || 'Default' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Service Name | ${{ env.TF_VAR_service_name }} | ${{ github.event.inputs.service_name && 'Manual Input' || vars.TERRAFORM_SERVICE_NAME && 'GitHub Variable (TERRAFORM_SERVICE_NAME)' || vars.CLOUD_RUN_SERVICE_NAME && 'GitHub Variable (CLOUD_RUN_SERVICE_NAME)' || 'Default' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Artifact Registry | ${{ env.TF_VAR_artifact_registry_repo }} | ${{ github.event.inputs.artifact_registry_repo && 'Manual Input' || vars.TERRAFORM_ARTIFACT_REGISTRY_REPO && 'GitHub Variable (TERRAFORM_ARTIFACT_REGISTRY_REPO)' || vars.ARTIFACT_REGISTRY_REPO && 'GitHub Variable (ARTIFACT_REGISTRY_REPO)' || 'Default' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Environment | ${{ env.TF_VAR_environment }} | ${{ github.event.inputs.environment && 'Manual Input' || vars.TERRAFORM_ENVIRONMENT && 'GitHub Variable (TERRAFORM_ENVIRONMENT)' || 'Default' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Billing Account | ${{ env.TF_VAR_billing_account_id && env.TF_VAR_billing_account_id || 'Not configured (manual setup required)' }} | ${{ github.event.inputs.billing_account_id && 'Manual Input' || vars.TERRAFORM_BILLING_ACCOUNT_ID && 'GitHub Variable (TERRAFORM_BILLING_ACCOUNT_ID)' || 'Manual Setup' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Workload Identity | ${{ env.TF_VAR_enable_workload_identity }} | ${{ github.event.inputs.enable_workload_identity && 'Manual Input' || vars.TERRAFORM_ENABLE_WORKLOAD_IDENTITY && 'GitHub Variable (TERRAFORM_ENABLE_WORKLOAD_IDENTITY)' || 'Default' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| GitHub Repository | ${{ env.TF_VAR_github_repo }} | ${{ github.event.inputs.github_repo && 'Manual Input' || vars.TERRAFORM_GITHUB_REPO && 'GitHub Variable (TERRAFORM_GITHUB_REPO)' || 'Auto-detected' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Storage Buckets Configuration" >> $GITHUB_STEP_SUMMARY
        echo '```json' >> $GITHUB_STEP_SUMMARY
        echo "$TF_VAR_storage_buckets" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

    - name: Terraform Init
      working-directory: terraform
      run: |
        echo "üîß Initializing Terraform..."
        terraform init

    - name: Terraform Validate
      working-directory: terraform
      run: |
        echo "üîç Validating Terraform configuration..."
        terraform validate
        if [ $? -ne 0 ]; then
          echo "‚ùå ERROR: Terraform configuration validation failed!"
          echo ""
          echo "This indicates a syntax or configuration error in the Terraform files."
          echo "Please check the error messages above and fix the configuration."
          echo ""
          echo "Common issues:"
          echo "- Invalid variable validation conditions"
          echo "- Syntax errors in .tf files"
          echo "- Missing required providers or modules"
          exit 1
        fi
        echo "‚úÖ Terraform configuration is valid"

    - name: Import Existing Resources (if needed)
      if: github.event.inputs.action == 'plan' || github.event.inputs.action == 'apply'
      working-directory: terraform
      run: |
        echo "üîÑ Checking for existing resources that need to be imported..."
        
        # Function to safely import resources
        import_if_exists() {
          local resource_address="$1"
          local resource_id="$2"
          local resource_name="$3"
          
          echo "Checking if $resource_name exists..."
          
          # Try to import, ignore error if resource doesn't exist or is already managed
          terraform import "$resource_address" "$resource_id" 2>/dev/null || {
            echo "Resource $resource_name: already managed or doesn't exist (this is fine)"
          }
        }
        
        # Import common resources that might already exist
        PROJECT_ID="${{ env.TF_VAR_project_id }}"
        REGION="${{ env.TF_VAR_region }}"
        REPO_NAME="${{ env.TF_VAR_artifact_registry_repo }}"
        
        # Import Artifact Registry repository
        import_if_exists \
          "google_artifact_registry_repository.filemanager_repo" \
          "projects/$PROJECT_ID/locations/$REGION/repositories/$REPO_NAME" \
          "Artifact Registry Repository"
        
        # Import GitHub Actions service account
        import_if_exists \
          "google_service_account.github_actions" \
          "projects/$PROJECT_ID/serviceAccounts/github-actions-sa@$PROJECT_ID.iam.gserviceaccount.com" \
          "GitHub Actions Service Account"
        
        # Import Workload Identity Pool (if enabled)
        if [ "${{ env.TF_VAR_enable_workload_identity }}" = "true" ]; then
          import_if_exists \
            "google_iam_workload_identity_pool.github_pool[0]" \
            "projects/$PROJECT_ID/locations/global/workloadIdentityPools/github-actions-pool" \
            "Workload Identity Pool"
          
          import_if_exists \
            "google_iam_workload_identity_pool_provider.github_provider[0]" \
            "projects/$PROJECT_ID/locations/global/workloadIdentityPools/github-actions-pool/providers/github-provider" \
            "Workload Identity Provider"
        fi
        
        # Import storage buckets
        echo "${{ env.TF_VAR_storage_buckets }}" | jq -r '.[].name' | while read bucket_name; do
          if [ -n "$bucket_name" ]; then
            import_if_exists \
              "google_storage_bucket.filemanager_buckets[\"$bucket_name\"]" \
              "$bucket_name" \
              "Storage Bucket: $bucket_name"
          fi
        done
        
        # Import Cloud Run service
        SERVICE_NAME="${{ env.TF_VAR_service_name }}"
        import_if_exists \
          "google_cloud_run_service.filemanager" \
          "projects/$PROJECT_ID/locations/$REGION/services/$SERVICE_NAME" \
          "Cloud Run Service: $SERVICE_NAME"
        
        echo "‚úÖ Resource import check completed"

    - name: Terraform Plan
      if: github.event.inputs.action == 'plan' || github.event.inputs.action == 'apply'
      working-directory: terraform
      run: |
        echo "üìã Generating Terraform plan..."
        set +e  # Disable exit on error to capture exit code
        terraform plan -detailed-exitcode -out=tfplan
        PLAN_EXIT_CODE=$?
        set -e  # Re-enable exit on error
        
        echo "Plan completed with exit code: $PLAN_EXIT_CODE"
        
        if [ $PLAN_EXIT_CODE -eq 1 ]; then
          echo "‚ùå ERROR: Terraform plan failed!"
          echo ""
          echo "This usually indicates:"
          echo "- Authentication issues with GCP"
          echo "- Missing required variables or configuration"
          echo "- Invalid resource configurations"
          echo "- Insufficient permissions"
          echo "- Billing not enabled for the project"
          echo "- Resources already exist (409 Conflict errors)"
          echo ""
          echo "Please check the error messages above and verify:"
          echo "1. All required GitHub Variables are set correctly"
          echo "2. Authentication (Workload Identity or Service Account Key) is working"
          echo "3. The service account has necessary permissions"
          echo "4. **Billing is enabled** for your GCP project"
          echo ""
          echo "üè¶ **Billing Error?** If you see 'Billing account not found':"
          echo "   - Go to Google Cloud Console > Billing"
          echo "   - Link a billing account to your project: ${{ env.TF_VAR_project_id }}"
          echo "   - Or provide billing_account_id when running this workflow"
          echo ""
          echo "üîÑ **Resource Conflicts (409)?** If you see 'already exists' errors:"
          echo "   - This usually means previous runs created resources"
          echo "   - The import step should handle this automatically"
          echo "   - If issues persist, check the Terraform state file"
          exit 1
        elif [ $PLAN_EXIT_CODE -eq 2 ]; then
          echo "üìù Plan generated successfully with changes to apply"
          echo "::notice::Terraform plan completed successfully - infrastructure changes detected"
        else
          echo "‚úÖ Plan generated successfully with no changes"
          echo "::notice::Terraform plan completed successfully - no changes needed"
        fi
        
        # Always exit with 0 for GitHub Actions since we handled the exit codes above
        exit 0

    - name: Save Terraform Plan
      if: github.event.inputs.action == 'plan' || github.event.inputs.action == 'apply'
      working-directory: terraform
      run: |
        terraform show -no-color tfplan > plan_output.txt
        echo "## Terraform Plan Output" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat plan_output.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: Terraform Apply
      if: github.event.inputs.action == 'apply'
      working-directory: terraform
      run: |
        echo "Applying Terraform configuration..."
        terraform apply -auto-approve tfplan

    - name: Terraform Destroy Plan
      if: github.event.inputs.action == 'destroy'
      working-directory: terraform
      run: |
        terraform plan -destroy -detailed-exitcode -out=destroy_plan
        terraform show -no-color destroy_plan > destroy_plan_output.txt
        echo "## Terraform Destroy Plan Output" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat destroy_plan_output.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo ""
        echo "‚ö†Ô∏è **DESTROY PLAN GENERATED** ‚ö†Ô∏è" >> $GITHUB_STEP_SUMMARY
        echo "This is a destroy plan preview. No resources have been destroyed yet." >> $GITHUB_STEP_SUMMARY
        echo "If you want to destroy the infrastructure, create a new manual run with confirmation." >> $GITHUB_STEP_SUMMARY

    - name: Terraform Destroy (with confirmation)
      if: github.event.inputs.action == 'destroy'
      working-directory: terraform
      run: |
        echo "‚ö†Ô∏è DESTROYING INFRASTRUCTURE ‚ö†Ô∏è"
        echo "This will permanently delete all infrastructure managed by Terraform."
        terraform destroy -auto-approve

    - name: Terraform Output
      if: github.event.inputs.action == 'output' || github.event.inputs.action == 'apply'
      working-directory: terraform
      run: |
        echo "## Terraform Outputs" >> $GITHUB_STEP_SUMMARY
        echo '```json' >> $GITHUB_STEP_SUMMARY
        terraform output -json >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        
        # Extract specific outputs for GitHub configuration
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## GitHub Configuration" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # GitHub Variables
        echo "### GitHub Variables to Configure:" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        terraform output -json github_variables | jq -r 'to_entries[] | "\(.key)=\(.value)"' >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        
        # GitHub Secrets for Workload Identity
        if [ "${{ env.TF_VAR_enable_workload_identity }}" = "true" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### GitHub Secrets for Workload Identity:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          terraform output -json github_secrets_workload_identity | jq -r 'to_entries[] | "\(.key)=\(.value)"' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        else
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### GitHub Secrets for Service Account Key:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "GCP_SERVICE_ACCOUNT_KEY=(from terraform output service_account_key)"
          echo '```' >> $GITHUB_STEP_SUMMARY
        fi

    - name: Upload Terraform Plan Artifact
      if: github.event.inputs.action == 'plan'
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-${{ github.run_number }}
        path: |
          terraform/tfplan
          terraform/plan_output.txt
        retention-days: 30

    - name: Summary
      run: |
        echo "## Terraform ${{ github.event.inputs.action }} Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Action**: ${{ github.event.inputs.action }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Project ID**: ${{ env.TF_VAR_project_id }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Region**: ${{ env.TF_VAR_region }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ env.TF_VAR_environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Workload Identity**: ${{ env.TF_VAR_enable_workload_identity }}" >> $GITHUB_STEP_SUMMARY
        echo "- **GitHub Repository**: ${{ env.TF_VAR_github_repo }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ github.event.inputs.action }}" = "apply" ]; then
          echo "‚úÖ **Infrastructure successfully provisioned!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Next steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Configure GitHub Secrets and Variables using the outputs above" >> $GITHUB_STEP_SUMMARY
          echo "2. Run the deployment workflow to deploy your application" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ github.event.inputs.action }}" = "plan" ]; then
          echo "üìã **Plan generated successfully**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Review the plan above and run with 'apply' action to provision infrastructure." >> $GITHUB_STEP_SUMMARY
        fi
