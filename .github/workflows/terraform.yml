name: Terraform Infrastructure Management

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy
          - output
      project_id:
        description: 'GCP Project ID'
        required: false
        default: ''
        type: string
      region:
        description: 'GCP Region'
        required: false
        default: ''
        type: string
      service_name:
        description: 'Cloud Run Service Name'
        required: false
        default: ''
        type: string
      artifact_registry_repo:
        description: 'Artifact Registry Repository Name'
        required: false
        default: ''
        type: string
      storage_buckets:
        description: 'Storage Buckets (comma-separated) - Leave empty to use GitHub variable'
        required: false
        default: ''
        type: string
      github_repo:
        description: 'GitHub Repository (owner/repo) for Workload Identity - Leave empty to auto-detect'
        required: false
        default: ''
        type: string
      enable_workload_identity:
        description: 'Enable Workload Identity (more secure)'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      environment:
        description: 'Environment (dev/staging/prod)'
        required: false
        default: 'prod'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  # Set Terraform variables with fallbacks from GitHub variables (no hard-coded defaults)
  TF_VAR_project_id: ${{ github.event.inputs.project_id || vars.TERRAFORM_PROJECT_ID || vars.GCP_PROJECT_ID }}
  TF_VAR_region: ${{ github.event.inputs.region || vars.TERRAFORM_REGION || vars.GCP_REGION }}
  TF_VAR_service_name: ${{ github.event.inputs.service_name || vars.TERRAFORM_SERVICE_NAME || vars.CLOUD_RUN_SERVICE_NAME }}
  TF_VAR_artifact_registry_repo: ${{ github.event.inputs.artifact_registry_repo || vars.TERRAFORM_ARTIFACT_REGISTRY_REPO || vars.ARTIFACT_REGISTRY_REPO }}
  TF_VAR_environment: ${{ github.event.inputs.environment || vars.TERRAFORM_ENVIRONMENT || 'prod' }}
  TF_VAR_enable_workload_identity: ${{ github.event.inputs.enable_workload_identity || vars.TERRAFORM_ENABLE_WORKLOAD_IDENTITY || 'true' }}
  TF_VAR_github_repo: ${{ github.event.inputs.github_repo || vars.TERRAFORM_GITHUB_REPO || github.repository }}

permissions:
  contents: read
  id-token: write  # Required for Workload Identity
  pull-requests: write  # For commenting on PRs with plan output

jobs:
  terraform:
    name: Terraform ${{ github.event.inputs.action }}
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate Required Variables
      run: |
        echo "🔍 Validating required configuration variables..."
        
        # Check required variables
        MISSING_VARS=""
        
        if [ -z "${{ env.TF_VAR_project_id }}" ]; then
          MISSING_VARS="$MISSING_VARS\n- project_id (set TERRAFORM_PROJECT_ID variable or provide manual input)"
        fi
        
        if [ -z "${{ env.TF_VAR_region }}" ]; then
          MISSING_VARS="$MISSING_VARS\n- region (set TERRAFORM_REGION variable or provide manual input)"
        fi
        
        if [ -z "${{ env.TF_VAR_service_name }}" ]; then
          MISSING_VARS="$MISSING_VARS\n- service_name (set TERRAFORM_SERVICE_NAME variable or provide manual input)"
        fi
        
        if [ -z "${{ env.TF_VAR_artifact_registry_repo }}" ]; then
          MISSING_VARS="$MISSING_VARS\n- artifact_registry_repo (set TERRAFORM_ARTIFACT_REGISTRY_REPO variable or provide manual input)"
        fi
        
        if [ -z "${{ env.TF_VAR_environment }}" ]; then
          MISSING_VARS="$MISSING_VARS\n- environment (set TERRAFORM_ENVIRONMENT variable or provide manual input)"
        fi
        
        if [ -z "${{ env.TF_VAR_enable_workload_identity }}" ]; then
          MISSING_VARS="$MISSING_VARS\n- enable_workload_identity (set TERRAFORM_ENABLE_WORKLOAD_IDENTITY variable or provide manual input)"
        fi
        
        if [ -n "$MISSING_VARS" ]; then
          echo "❌ ERROR: Missing required configuration variables:"
          echo -e "$MISSING_VARS"
          echo ""
          echo "Please either:"
          echo "1. Set GitHub Variables at: Settings > Secrets and variables > Actions > Variables"
          echo "2. Provide values when running this workflow manually"
          echo ""
          echo "See docs/GITHUB_VARIABLES_SETUP.md for detailed setup instructions"
          exit 1
        fi
        
        echo "✅ All required variables are provided"

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.6.0
        terraform_wrapper: false

    - name: Set authentication method
      id: auth-method
      run: |
        if [ -n "${{ secrets.WIF_PROVIDER }}" ]; then
          echo "method=workload-identity" >> $GITHUB_OUTPUT
        else
          echo "method=service-account" >> $GITHUB_OUTPUT
        fi

    # Authenticate to Google Cloud using Workload Identity (if configured)
    - name: Authenticate to Google Cloud (Workload Identity)
      if: steps.auth-method.outputs.method == 'workload-identity'
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

    # Fallback: Authenticate using Service Account Key
    - name: Authenticate to Google Cloud (Service Account Key)
      if: steps.auth-method.outputs.method == 'service-account'
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ github.event.inputs.project_id }}

    - name: Process storage buckets input
      id: process-buckets
      run: |
        # Use input or GitHub variable for storage buckets
        BUCKETS_INPUT="${{ github.event.inputs.storage_buckets }}"
        if [ -z "$BUCKETS_INPUT" ]; then
          BUCKETS_INPUT="${{ vars.TERRAFORM_STORAGE_BUCKETS || vars.ALLOWED_BUCKETS }}"
        fi
        
        # Require explicit bucket configuration
        if [ -z "$BUCKETS_INPUT" ]; then
          echo "❌ ERROR: Storage buckets must be configured!"
          echo ""
          echo "Please either:"
          echo "1. Set TERRAFORM_STORAGE_BUCKETS GitHub Variable (comma-separated list)"
          echo "2. Provide storage_buckets input when running this workflow"
          echo ""
          echo "Example: bucket1,bucket2,bucket3"
          echo "See docs/GITHUB_VARIABLES_SETUP.md for setup instructions"
          exit 1
        fi
        
        echo "Raw buckets input: $BUCKETS_INPUT"
        
        # Validate buckets list is not empty after trimming
        BUCKETS_CLEAN=$(echo "$BUCKETS_INPUT" | tr -d ' ')
        if [ -z "$BUCKETS_CLEAN" ]; then
          echo "❌ ERROR: Storage buckets list is empty after processing!"
          exit 1
        fi
        
        # Convert to JSON array format for Terraform
        BUCKETS_JSON=$(echo "$BUCKETS_CLEAN" | sed 's/,/","/g' | sed 's/^/["/' | sed 's/$/"]/')
        echo "TF_VAR_storage_buckets=$BUCKETS_JSON" >> $GITHUB_ENV
        echo "Processed buckets: $BUCKETS_JSON"

    - name: Display Configuration Summary
      run: |
        echo "## Configuration Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Setting | Value | Source |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|--------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Project ID | ${{ env.TF_VAR_project_id }} | ${{ github.event.inputs.project_id && 'Manual Input' || vars.TERRAFORM_PROJECT_ID && 'GitHub Variable (TERRAFORM_PROJECT_ID)' || vars.GCP_PROJECT_ID && 'GitHub Variable (GCP_PROJECT_ID)' || 'Default' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Region | ${{ env.TF_VAR_region }} | ${{ github.event.inputs.region && 'Manual Input' || vars.TERRAFORM_REGION && 'GitHub Variable (TERRAFORM_REGION)' || vars.GCP_REGION && 'GitHub Variable (GCP_REGION)' || 'Default' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Service Name | ${{ env.TF_VAR_service_name }} | ${{ github.event.inputs.service_name && 'Manual Input' || vars.TERRAFORM_SERVICE_NAME && 'GitHub Variable (TERRAFORM_SERVICE_NAME)' || vars.CLOUD_RUN_SERVICE_NAME && 'GitHub Variable (CLOUD_RUN_SERVICE_NAME)' || 'Default' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Artifact Registry | ${{ env.TF_VAR_artifact_registry_repo }} | ${{ github.event.inputs.artifact_registry_repo && 'Manual Input' || vars.TERRAFORM_ARTIFACT_REGISTRY_REPO && 'GitHub Variable (TERRAFORM_ARTIFACT_REGISTRY_REPO)' || vars.ARTIFACT_REGISTRY_REPO && 'GitHub Variable (ARTIFACT_REGISTRY_REPO)' || 'Default' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Environment | ${{ env.TF_VAR_environment }} | ${{ github.event.inputs.environment && 'Manual Input' || vars.TERRAFORM_ENVIRONMENT && 'GitHub Variable (TERRAFORM_ENVIRONMENT)' || 'Default' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Workload Identity | ${{ env.TF_VAR_enable_workload_identity }} | ${{ github.event.inputs.enable_workload_identity && 'Manual Input' || vars.TERRAFORM_ENABLE_WORKLOAD_IDENTITY && 'GitHub Variable (TERRAFORM_ENABLE_WORKLOAD_IDENTITY)' || 'Default' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| GitHub Repository | ${{ env.TF_VAR_github_repo }} | ${{ github.event.inputs.github_repo && 'Manual Input' || vars.TERRAFORM_GITHUB_REPO && 'GitHub Variable (TERRAFORM_GITHUB_REPO)' || 'Auto-detected' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Storage Buckets" >> $GITHUB_STEP_SUMMARY
        echo '```json' >> $GITHUB_STEP_SUMMARY
        echo "${{ env.TF_VAR_storage_buckets }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

    - name: Terraform Init
      working-directory: terraform
      run: terraform init

    - name: Terraform Validate
      working-directory: terraform
      run: terraform validate

    - name: Terraform Plan
      if: github.event.inputs.action == 'plan' || github.event.inputs.action == 'apply'
      working-directory: terraform
      run: |
        terraform plan -detailed-exitcode -out=tfplan
        echo "Plan completed. Exit code: $?"
      continue-on-error: true

    - name: Save Terraform Plan
      if: github.event.inputs.action == 'plan' || github.event.inputs.action == 'apply'
      working-directory: terraform
      run: |
        terraform show -no-color tfplan > plan_output.txt
        echo "## Terraform Plan Output" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat plan_output.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: Terraform Apply
      if: github.event.inputs.action == 'apply'
      working-directory: terraform
      run: |
        echo "Applying Terraform configuration..."
        terraform apply -auto-approve tfplan

    - name: Terraform Destroy Plan
      if: github.event.inputs.action == 'destroy'
      working-directory: terraform
      run: |
        terraform plan -destroy -detailed-exitcode -out=destroy_plan
        terraform show -no-color destroy_plan > destroy_plan_output.txt
        echo "## Terraform Destroy Plan Output" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat destroy_plan_output.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo ""
        echo "⚠️ **DESTROY PLAN GENERATED** ⚠️" >> $GITHUB_STEP_SUMMARY
        echo "This is a destroy plan preview. No resources have been destroyed yet." >> $GITHUB_STEP_SUMMARY
        echo "If you want to destroy the infrastructure, create a new manual run with confirmation." >> $GITHUB_STEP_SUMMARY

    - name: Terraform Destroy (with confirmation)
      if: github.event.inputs.action == 'destroy'
      working-directory: terraform
      run: |
        echo "⚠️ DESTROYING INFRASTRUCTURE ⚠️"
        echo "This will permanently delete all infrastructure managed by Terraform."
        terraform destroy -auto-approve

    - name: Terraform Output
      if: github.event.inputs.action == 'output' || github.event.inputs.action == 'apply'
      working-directory: terraform
      run: |
        echo "## Terraform Outputs" >> $GITHUB_STEP_SUMMARY
        echo '```json' >> $GITHUB_STEP_SUMMARY
        terraform output -json >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        
        # Extract specific outputs for GitHub configuration
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## GitHub Configuration" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # GitHub Variables
        echo "### GitHub Variables to Configure:" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        terraform output -json github_variables | jq -r 'to_entries[] | "\(.key)=\(.value)"' >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        
        # GitHub Secrets for Workload Identity
        if [ "${{ github.event.inputs.enable_workload_identity }}" = "true" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### GitHub Secrets for Workload Identity:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          terraform output -json github_secrets_workload_identity | jq -r 'to_entries[] | "\(.key)=\(.value)"' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        else
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### GitHub Secrets for Service Account Key:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "GCP_SERVICE_ACCOUNT_KEY=(from terraform output service_account_key)"
          echo '```' >> $GITHUB_STEP_SUMMARY
        fi

    - name: Upload Terraform Plan Artifact
      if: github.event.inputs.action == 'plan'
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-${{ github.run_number }}
        path: |
          terraform/tfplan
          terraform/plan_output.txt
        retention-days: 30

    - name: Summary
      run: |
        echo "## Terraform ${{ github.event.inputs.action }} Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Action**: ${{ github.event.inputs.action }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Project ID**: ${{ github.event.inputs.project_id }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Region**: ${{ github.event.inputs.region }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Workload Identity**: ${{ github.event.inputs.enable_workload_identity }}" >> $GITHUB_STEP_SUMMARY
        echo "- **GitHub Repository**: ${{ env.TF_VAR_github_repo }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ github.event.inputs.action }}" = "apply" ]; then
          echo "✅ **Infrastructure successfully provisioned!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Next steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Configure GitHub Secrets and Variables using the outputs above" >> $GITHUB_STEP_SUMMARY
          echo "2. Run the deployment workflow to deploy your application" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ github.event.inputs.action }}" = "plan" ]; then
          echo "📋 **Plan generated successfully**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Review the plan above and run with 'apply' action to provision infrastructure." >> $GITHUB_STEP_SUMMARY
        fi
